service: employee-directory
frameworkVersion: '3'

plugins:
  - serverless-offline
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    DATABASE_URL: ${ssm:/employee-directory/${self:provider.stage}/database-url}
    FLASK_SECRET: ${ssm:/employee-directory/${self:provider.stage}/flask-secret}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - rds:*
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::employee-directory-static-${self:provider.stage}/*"
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - "arn:aws:ssm:${self:provider.region}:*:parameter/employee-directory/${self:provider.stage}/*"

functions:
  api:
    handler: handler.lambda_handler
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
    memorySize: 512
    timeout: 30
    environment:
      DATABASE_URL: ${ssm:/employee-directory/${self:provider.stage}/database-url}
      FLASK_SECRET: ${ssm:/employee-directory/${self:provider.stage}/flask-secret}
    tags:
      Environment: ${self:provider.stage}
      Application: EmployeeDirectory

  static:
    handler: static.handler
    events:
      - s3:
          bucket: employee-directory-static-${self:provider.stage}
          event: s3:ObjectCreated:*
          rules:
            - prefix: static/
            - suffix: .css
            - suffix: .js
            - suffix: .png
            - suffix: .jpg

resources:
  Resources:
    StaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: employee-directory-static-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: ['*']
              MaxAge: 3000
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Application
            Value: EmployeeDirectory

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt StaticBucket.RegionalDomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
          PriceClass: PriceClass_100
          Tags:
            - Key: Environment
              Value: ${self:provider.stage}
            - Key: Application
              Value: EmployeeDirectory

    CloudFrontOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Employee Directory Static Assets

    StaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StaticBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
              Action: s3:GetObject
              Resource: !Sub '${StaticBucket}/*'

  Outputs:
    ApiUrl:
      Description: API Gateway URL
      Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/'
    StaticBucketName:
      Description: S3 Bucket for static assets
      Value: !Ref StaticBucket
    CloudFrontUrl:
      Description: CloudFront Distribution URL
      Value: !Sub 'https://${CloudFrontDistribution.DomainName}/'
